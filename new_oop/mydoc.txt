
Object Oriented Programming


4 Pillars (core concepts):

* ENCAPSULATION
        - combining a group of related variables and functions in a unit called Object
        - those variables are called "properties" and the functions "methods"
        - reusability of code
  
    example: a car
             a car has properties such as: make, model, color
             and methods (behaviour) like: start(), move(), stop()
    see Employee example in . test.py

* ABSTRACTION
        - hide some methods and properties from the outside
        - reduce the impact of change
        making the code maintainable without having to worry about all the complexity

* INHERITANCE
        - mechanism that allows you to eliminate redundant code
        - no need to redefine every properties and methods for each object
    example: animals
         all animals have certain properties and methods in common so instead of
         redefining those for every type of animal we define them once in a generic 
         class called Animal 

* POLYMORPHISM
        - poly means many and morph means form 
        - technique that allows you to get rid of endless if-else
          or switch and case statements
    example: back from the above
         all animals move but the way they move differ from one another


*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

Encapsulation:
       * Refers to bundling data with methods that can operate on that data within a class.
       * Itâ€™s the idea of hiding data within  a class, preventing anything outside that class directly interacting with it.
       * Keeps the programmer in control of access to data.
       * Prevents the programmer from ending up in any strange or unwanted states.

Abstraction:
       * Refers to the idea to only showing essential details and keeping everything else hidden.
       * The classes you create should act like your car. Users of your classes should not worry 
       about the inner details of those classes.
       * This is very important when working on your program incrementally.
       
Inheritance:
       * Is the principle that allows classes to derive from other classes.

Polymorphism:
       * Describes methods that are able to take on many forms.
       * Allows methods to take on many different forms.
       * Be sure that you are calling the correct form of the method.
       * There are two types of polymorphism: 
        	** Dynamic polymorphism: 
               	 	- Occurs during the runtime of the program.
          		- Describes when a method signature is in both subclass and a superclass.
        		- The methods share the same name but have different implementation.
             		- The implementation of the subclass that the object is an instance of 
                   	overrides that of the superclass.
              	** Static polymorphism:
              		-  Occurs during compile-time rather than during runtime.
              		-  Refers to when multiply methods with the same name but different arguments
              		   are defined in the same class.
              		-  The parameters are different type or taken in different order.
              		-  This is known as method overloading.